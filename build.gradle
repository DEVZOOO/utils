buildscript {
    ext {
        springBootVersion = '3.2.0'
        dependencyManageVersion = '1.1.4'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManageVersion}")
    }
}

group = 'com.judy'
version = '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 17

/*
java {
    sourceCompatibility = '17'
}
 */

compileJava.options.encoding = 'UTF-8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java:5.1.38'

    // DB 응답 로그
    implementation "org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:1.16"
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.1.2'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // util
    implementation 'org.apache.commons:commons-lang3'

    // excel
    implementation 'org.apache.poi:poi:4.1.2';
    implementation 'org.apache.poi:poi-ooxml:4.1.2';

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    // TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // DEV TOOLS
    implementation 'org.springframework.boot:spring-boot-devtools'

}

test {
    useJUnitPlatform()
}

// queryDSL 추가 : QueryDSL 빌드 옵션
def generated = 'src/main/generated'
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}
sourceSets {
    main.java.srcDirs += [ generated ]
}
clean {
    delete file(generated)
}